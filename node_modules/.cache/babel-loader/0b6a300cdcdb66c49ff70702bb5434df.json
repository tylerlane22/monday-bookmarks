{"ast":null,"code":"const Rx = require('rxjs');\n\nconst {\n  bufferCount,\n  map,\n  switchMap,\n  take\n} = require('rxjs/operators');\n\nmodule.exports = class CompletionListener {\n  constructor({\n    successCondition,\n    scheduler\n  }) {\n    this.successCondition = successCondition;\n    this.scheduler = scheduler;\n  }\n\n  isSuccess(exitCodes) {\n    switch (this.successCondition) {\n      /* eslint-disable indent */\n      case 'first':\n        return exitCodes[0] === 0;\n\n      case 'last':\n        return exitCodes[exitCodes.length - 1] === 0;\n\n      default:\n        return exitCodes.every(exitCode => exitCode === 0);\n\n      /* eslint-enable indent */\n    }\n  }\n\n  listen(commands) {\n    const closeStreams = commands.map(command => command.close);\n    return Rx.merge(...closeStreams).pipe(bufferCount(closeStreams.length), switchMap(exitCodes => this.isSuccess(exitCodes) ? Rx.of(exitCodes, this.scheduler) : Rx.throwError(exitCodes, this.scheduler)), take(1)).toPromise();\n  }\n\n};","map":{"version":3,"sources":["/Users/tylerlane/Documents/MondayApps/bookmarks/quickstart-react/node_modules/concurrently/src/completion-listener.js"],"names":["Rx","require","bufferCount","map","switchMap","take","module","exports","CompletionListener","constructor","successCondition","scheduler","isSuccess","exitCodes","length","every","exitCode","listen","commands","closeStreams","command","close","merge","pipe","of","throwError","toPromise"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AACA,MAAM;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,GAAf;AAAoBC,EAAAA,SAApB;AAA+BC,EAAAA;AAA/B,IAAwCJ,OAAO,CAAC,gBAAD,CAArD;;AAEAK,MAAM,CAACC,OAAP,GAAiB,MAAMC,kBAAN,CAAyB;AACtCC,EAAAA,WAAW,CAAC;AAAEC,IAAAA,gBAAF;AAAoBC,IAAAA;AAApB,GAAD,EAAkC;AACzC,SAAKD,gBAAL,GAAwBA,gBAAxB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACH;;AAEDC,EAAAA,SAAS,CAACC,SAAD,EAAY;AACjB,YAAQ,KAAKH,gBAAb;AACA;AACI,WAAK,OAAL;AACI,eAAOG,SAAS,CAAC,CAAD,CAAT,KAAiB,CAAxB;;AAEJ,WAAK,MAAL;AACI,eAAOA,SAAS,CAACA,SAAS,CAACC,MAAV,GAAmB,CAApB,CAAT,KAAoC,CAA3C;;AAEJ;AACI,eAAOD,SAAS,CAACE,KAAV,CAAgBC,QAAQ,IAAIA,QAAQ,KAAK,CAAzC,CAAP;;AACJ;AAVJ;AAYH;;AAEDC,EAAAA,MAAM,CAACC,QAAD,EAAW;AACb,UAAMC,YAAY,GAAGD,QAAQ,CAACf,GAAT,CAAaiB,OAAO,IAAIA,OAAO,CAACC,KAAhC,CAArB;AACA,WAAOrB,EAAE,CAACsB,KAAH,CAAS,GAAGH,YAAZ,EACFI,IADE,CAECrB,WAAW,CAACiB,YAAY,CAACL,MAAd,CAFZ,EAGCV,SAAS,CAACS,SAAS,IACf,KAAKD,SAAL,CAAeC,SAAf,IACMb,EAAE,CAACwB,EAAH,CAAMX,SAAN,EAAiB,KAAKF,SAAtB,CADN,GAEMX,EAAE,CAACyB,UAAH,CAAcZ,SAAd,EAAyB,KAAKF,SAA9B,CAHD,CAHV,EAQCN,IAAI,CAAC,CAAD,CARL,EAUFqB,SAVE,EAAP;AAWH;;AAlCqC,CAA1C","sourcesContent":["const Rx = require('rxjs');\nconst { bufferCount, map, switchMap, take } = require('rxjs/operators');\n\nmodule.exports = class CompletionListener {\n    constructor({ successCondition, scheduler }) {\n        this.successCondition = successCondition;\n        this.scheduler = scheduler;\n    }\n\n    isSuccess(exitCodes) {\n        switch (this.successCondition) {\n        /* eslint-disable indent */\n            case 'first':\n                return exitCodes[0] === 0;\n\n            case 'last':\n                return exitCodes[exitCodes.length - 1] === 0;\n\n            default:\n                return exitCodes.every(exitCode => exitCode === 0);\n            /* eslint-enable indent */\n        }\n    }\n\n    listen(commands) {\n        const closeStreams = commands.map(command => command.close);\n        return Rx.merge(...closeStreams)\n            .pipe(\n                bufferCount(closeStreams.length),\n                switchMap(exitCodes =>\n                    this.isSuccess(exitCodes)\n                        ? Rx.of(exitCodes, this.scheduler)\n                        : Rx.throwError(exitCodes, this.scheduler)\n                ),\n                take(1)\n            )\n            .toPromise();\n    }\n};\n"]},"metadata":{},"sourceType":"script"}