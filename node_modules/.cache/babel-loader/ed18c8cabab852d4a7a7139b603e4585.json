{"ast":null,"code":"const _ = require('lodash');\n\nconst readPkg = require('read-pkg');\n\nmodule.exports = class ExpandNpmWildcard {\n  constructor(readPackage = readPkg.sync) {\n    this.readPackage = readPackage;\n  }\n\n  parse(commandInfo) {\n    const [, npmCmd, cmdName, args] = commandInfo.command.match(/(npm|yarn) run (\\S+)([^&]*)/) || [];\n    const wildcardPosition = (cmdName || '').indexOf('*'); // If the regex didn't match an npm script, or it has no wildcard,\n    // then we have nothing to do here\n\n    if (!cmdName || wildcardPosition === -1) {\n      return commandInfo;\n    }\n\n    if (!this.scripts) {\n      this.scripts = Object.keys(this.readPackage().scripts || {});\n    }\n\n    const preWildcard = _.escapeRegExp(cmdName.substr(0, wildcardPosition));\n\n    const postWildcard = _.escapeRegExp(cmdName.substr(wildcardPosition + 1));\n\n    const wildcardRegex = new RegExp(`^${preWildcard}(.*?)${postWildcard}$`);\n    return this.scripts.filter(script => wildcardRegex.test(script)).map(script => Object.assign({}, commandInfo, {\n      command: `${npmCmd} run ${script}${args}`,\n      name: script\n    }));\n  }\n\n};","map":{"version":3,"sources":["/Users/tylerlane/Documents/MondayApps/bookmarks/quickstart-react/node_modules/concurrently/src/command-parser/expand-npm-wildcard.js"],"names":["_","require","readPkg","module","exports","ExpandNpmWildcard","constructor","readPackage","sync","parse","commandInfo","npmCmd","cmdName","args","command","match","wildcardPosition","indexOf","scripts","Object","keys","preWildcard","escapeRegExp","substr","postWildcard","wildcardRegex","RegExp","filter","script","test","map","assign","name"],"mappings":"AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,MAAMC,iBAAN,CAAwB;AACrCC,EAAAA,WAAW,CAACC,WAAW,GAAGL,OAAO,CAACM,IAAvB,EAA6B;AACpC,SAAKD,WAAL,GAAmBA,WAAnB;AACH;;AAEDE,EAAAA,KAAK,CAACC,WAAD,EAAc;AACf,UAAM,GAAGC,MAAH,EAAWC,OAAX,EAAoBC,IAApB,IAA4BH,WAAW,CAACI,OAAZ,CAAoBC,KAApB,CAA0B,6BAA1B,KAA4D,EAA9F;AACA,UAAMC,gBAAgB,GAAG,CAACJ,OAAO,IAAI,EAAZ,EAAgBK,OAAhB,CAAwB,GAAxB,CAAzB,CAFe,CAIf;AACA;;AACA,QAAI,CAACL,OAAD,IAAYI,gBAAgB,KAAK,CAAC,CAAtC,EAAyC;AACrC,aAAON,WAAP;AACH;;AAED,QAAI,CAAC,KAAKQ,OAAV,EAAmB;AACf,WAAKA,OAAL,GAAeC,MAAM,CAACC,IAAP,CAAY,KAAKb,WAAL,GAAmBW,OAAnB,IAA8B,EAA1C,CAAf;AACH;;AAED,UAAMG,WAAW,GAAGrB,CAAC,CAACsB,YAAF,CAAeV,OAAO,CAACW,MAAR,CAAe,CAAf,EAAkBP,gBAAlB,CAAf,CAApB;;AACA,UAAMQ,YAAY,GAAGxB,CAAC,CAACsB,YAAF,CAAeV,OAAO,CAACW,MAAR,CAAeP,gBAAgB,GAAG,CAAlC,CAAf,CAArB;;AACA,UAAMS,aAAa,GAAG,IAAIC,MAAJ,CAAY,IAAGL,WAAY,QAAOG,YAAa,GAA/C,CAAtB;AAEA,WAAO,KAAKN,OAAL,CACFS,MADE,CACKC,MAAM,IAAIH,aAAa,CAACI,IAAd,CAAmBD,MAAnB,CADf,EAEFE,GAFE,CAEEF,MAAM,IAAIT,MAAM,CAACY,MAAP,CAAc,EAAd,EAAkBrB,WAAlB,EAA+B;AAC1CI,MAAAA,OAAO,EAAG,GAAEH,MAAO,QAAOiB,MAAO,GAAEf,IAAK,EADE;AAE1CmB,MAAAA,IAAI,EAAEJ;AAFoC,KAA/B,CAFZ,CAAP;AAMH;;AA7BoC,CAAzC","sourcesContent":["const _ = require('lodash');\nconst readPkg = require('read-pkg');\n\nmodule.exports = class ExpandNpmWildcard {\n    constructor(readPackage = readPkg.sync) {\n        this.readPackage = readPackage;\n    }\n\n    parse(commandInfo) {\n        const [, npmCmd, cmdName, args] = commandInfo.command.match(/(npm|yarn) run (\\S+)([^&]*)/) || [];\n        const wildcardPosition = (cmdName || '').indexOf('*');\n\n        // If the regex didn't match an npm script, or it has no wildcard,\n        // then we have nothing to do here\n        if (!cmdName || wildcardPosition === -1) {\n            return commandInfo;\n        }\n\n        if (!this.scripts) {\n            this.scripts = Object.keys(this.readPackage().scripts || {});\n        }\n\n        const preWildcard = _.escapeRegExp(cmdName.substr(0, wildcardPosition));\n        const postWildcard = _.escapeRegExp(cmdName.substr(wildcardPosition + 1));\n        const wildcardRegex = new RegExp(`^${preWildcard}(.*?)${postWildcard}$`);\n\n        return this.scripts\n            .filter(script => wildcardRegex.test(script))\n            .map(script => Object.assign({}, commandInfo, {\n                command: `${npmCmd} run ${script}${args}`,\n                name: script\n            }));\n    }\n};\n"]},"metadata":{},"sourceType":"script"}