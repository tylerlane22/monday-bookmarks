{"ast":null,"code":"'use strict';\n\nvar licenses = [].concat(require('spdx-license-ids')).concat(require('spdx-license-ids/deprecated'));\n\nvar exceptions = require('spdx-exceptions');\n\nmodule.exports = function (source) {\n  var index = 0;\n\n  function hasMore() {\n    return index < source.length;\n  } // `value` can be a regexp or a string.\n  // If it is recognized, the matching source string is returned and\n  // the index is incremented. Otherwise `undefined` is returned.\n\n\n  function read(value) {\n    if (value instanceof RegExp) {\n      var chars = source.slice(index);\n      var match = chars.match(value);\n\n      if (match) {\n        index += match[0].length;\n        return match[0];\n      }\n    } else {\n      if (source.indexOf(value, index) === index) {\n        index += value.length;\n        return value;\n      }\n    }\n  }\n\n  function skipWhitespace() {\n    read(/[ ]*/);\n  }\n\n  function operator() {\n    var string;\n    var possibilities = ['WITH', 'AND', 'OR', '(', ')', ':', '+'];\n\n    for (var i = 0; i < possibilities.length; i++) {\n      string = read(possibilities[i]);\n\n      if (string) {\n        break;\n      }\n    }\n\n    if (string === '+' && index > 1 && source[index - 2] === ' ') {\n      throw new Error('Space before `+`');\n    }\n\n    return string && {\n      type: 'OPERATOR',\n      string: string\n    };\n  }\n\n  function idstring() {\n    return read(/[A-Za-z0-9-.]+/);\n  }\n\n  function expectIdstring() {\n    var string = idstring();\n\n    if (!string) {\n      throw new Error('Expected idstring at offset ' + index);\n    }\n\n    return string;\n  }\n\n  function documentRef() {\n    if (read('DocumentRef-')) {\n      var string = expectIdstring();\n      return {\n        type: 'DOCUMENTREF',\n        string: string\n      };\n    }\n  }\n\n  function licenseRef() {\n    if (read('LicenseRef-')) {\n      var string = expectIdstring();\n      return {\n        type: 'LICENSEREF',\n        string: string\n      };\n    }\n  }\n\n  function identifier() {\n    var begin = index;\n    var string = idstring();\n\n    if (licenses.indexOf(string) !== -1) {\n      return {\n        type: 'LICENSE',\n        string: string\n      };\n    } else if (exceptions.indexOf(string) !== -1) {\n      return {\n        type: 'EXCEPTION',\n        string: string\n      };\n    }\n\n    index = begin;\n  } // Tries to read the next token. Returns `undefined` if no token is\n  // recognized.\n\n\n  function parseToken() {\n    // Ordering matters\n    return operator() || documentRef() || licenseRef() || identifier();\n  }\n\n  var tokens = [];\n\n  while (hasMore()) {\n    skipWhitespace();\n\n    if (!hasMore()) {\n      break;\n    }\n\n    var token = parseToken();\n\n    if (!token) {\n      throw new Error('Unexpected `' + source[index] + '` at offset ' + index);\n    }\n\n    tokens.push(token);\n  }\n\n  return tokens;\n};","map":{"version":3,"sources":["/Users/tylerlane/Documents/MondayApps/bookmarks/quickstart-react/node_modules/spdx-expression-parse/scan.js"],"names":["licenses","concat","require","exceptions","module","exports","source","index","hasMore","length","read","value","RegExp","chars","slice","match","indexOf","skipWhitespace","operator","string","possibilities","i","Error","type","idstring","expectIdstring","documentRef","licenseRef","identifier","begin","parseToken","tokens","token","push"],"mappings":"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","sourcesContent":["'use strict'\n\nvar licenses = []\n  .concat(require('spdx-license-ids'))\n  .concat(require('spdx-license-ids/deprecated'))\nvar exceptions = require('spdx-exceptions')\n\nmodule.exports = function (source) {\n  var index = 0\n\n  function hasMore () {\n    return index < source.length\n  }\n\n  // `value` can be a regexp or a string.\n  // If it is recognized, the matching source string is returned and\n  // the index is incremented. Otherwise `undefined` is returned.\n  function read (value) {\n    if (value instanceof RegExp) {\n      var chars = source.slice(index)\n      var match = chars.match(value)\n      if (match) {\n        index += match[0].length\n        return match[0]\n      }\n    } else {\n      if (source.indexOf(value, index) === index) {\n        index += value.length\n        return value\n      }\n    }\n  }\n\n  function skipWhitespace () {\n    read(/[ ]*/)\n  }\n\n  function operator () {\n    var string\n    var possibilities = ['WITH', 'AND', 'OR', '(', ')', ':', '+']\n    for (var i = 0; i < possibilities.length; i++) {\n      string = read(possibilities[i])\n      if (string) {\n        break\n      }\n    }\n\n    if (string === '+' && index > 1 && source[index - 2] === ' ') {\n      throw new Error('Space before `+`')\n    }\n\n    return string && {\n      type: 'OPERATOR',\n      string: string\n    }\n  }\n\n  function idstring () {\n    return read(/[A-Za-z0-9-.]+/)\n  }\n\n  function expectIdstring () {\n    var string = idstring()\n    if (!string) {\n      throw new Error('Expected idstring at offset ' + index)\n    }\n    return string\n  }\n\n  function documentRef () {\n    if (read('DocumentRef-')) {\n      var string = expectIdstring()\n      return { type: 'DOCUMENTREF', string: string }\n    }\n  }\n\n  function licenseRef () {\n    if (read('LicenseRef-')) {\n      var string = expectIdstring()\n      return { type: 'LICENSEREF', string: string }\n    }\n  }\n\n  function identifier () {\n    var begin = index\n    var string = idstring()\n\n    if (licenses.indexOf(string) !== -1) {\n      return {\n        type: 'LICENSE',\n        string: string\n      }\n    } else if (exceptions.indexOf(string) !== -1) {\n      return {\n        type: 'EXCEPTION',\n        string: string\n      }\n    }\n\n    index = begin\n  }\n\n  // Tries to read the next token. Returns `undefined` if no token is\n  // recognized.\n  function parseToken () {\n    // Ordering matters\n    return (\n      operator() ||\n      documentRef() ||\n      licenseRef() ||\n      identifier()\n    )\n  }\n\n  var tokens = []\n  while (hasMore()) {\n    skipWhitespace()\n    if (!hasMore()) {\n      break\n    }\n\n    var token = parseToken()\n    if (!token) {\n      throw new Error('Unexpected `' + source[index] +\n                      '` at offset ' + index)\n    }\n\n    tokens.push(token)\n  }\n  return tokens\n}\n"]},"metadata":{},"sourceType":"script"}