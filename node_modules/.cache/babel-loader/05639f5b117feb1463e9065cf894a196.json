{"ast":null,"code":"const Rx = require('rxjs');\n\nconst {\n  map\n} = require('rxjs/operators');\n\nconst defaults = require('../defaults');\n\nmodule.exports = class InputHandler {\n  constructor({\n    defaultInputTarget,\n    inputStream,\n    logger\n  }) {\n    this.defaultInputTarget = defaultInputTarget || defaults.defaultInputTarget;\n    this.inputStream = inputStream;\n    this.logger = logger;\n  }\n\n  handle(commands) {\n    if (!this.inputStream) {\n      return commands;\n    }\n\n    Rx.fromEvent(this.inputStream, 'data').pipe(map(data => data.toString())).subscribe(data => {\n      let [targetId, input] = data.split(':', 2);\n      targetId = input ? targetId : this.defaultInputTarget;\n      input = input || data;\n      const command = commands.find(command => command.name === targetId || command.index.toString() === targetId.toString());\n\n      if (command && command.stdin) {\n        command.stdin.write(input);\n      } else {\n        this.logger.logGlobalEvent(`Unable to find command ${targetId}, or it has no stdin open\\n`);\n      }\n    });\n    return commands;\n  }\n\n};","map":{"version":3,"sources":["/Users/tylerlane/Documents/MondayApps/bookmarks/quickstart-react/node_modules/concurrently/src/flow-control/input-handler.js"],"names":["Rx","require","map","defaults","module","exports","InputHandler","constructor","defaultInputTarget","inputStream","logger","handle","commands","fromEvent","pipe","data","toString","subscribe","targetId","input","split","command","find","name","index","stdin","write","logGlobalEvent"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAUD,OAAO,CAAC,gBAAD,CAAvB;;AAEA,MAAME,QAAQ,GAAGF,OAAO,CAAC,aAAD,CAAxB;;AAEAG,MAAM,CAACC,OAAP,GAAiB,MAAMC,YAAN,CAAmB;AAChCC,EAAAA,WAAW,CAAC;AAAEC,IAAAA,kBAAF;AAAsBC,IAAAA,WAAtB;AAAmCC,IAAAA;AAAnC,GAAD,EAA8C;AACrD,SAAKF,kBAAL,GAA0BA,kBAAkB,IAAIL,QAAQ,CAACK,kBAAzD;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;;AAEDC,EAAAA,MAAM,CAACC,QAAD,EAAW;AACb,QAAI,CAAC,KAAKH,WAAV,EAAuB;AACnB,aAAOG,QAAP;AACH;;AAEDZ,IAAAA,EAAE,CAACa,SAAH,CAAa,KAAKJ,WAAlB,EAA+B,MAA/B,EACKK,IADL,CACUZ,GAAG,CAACa,IAAI,IAAIA,IAAI,CAACC,QAAL,EAAT,CADb,EAEKC,SAFL,CAEeF,IAAI,IAAI;AACf,UAAI,CAACG,QAAD,EAAWC,KAAX,IAAoBJ,IAAI,CAACK,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAxB;AACAF,MAAAA,QAAQ,GAAGC,KAAK,GAAGD,QAAH,GAAc,KAAKV,kBAAnC;AACAW,MAAAA,KAAK,GAAGA,KAAK,IAAIJ,IAAjB;AAEA,YAAMM,OAAO,GAAGT,QAAQ,CAACU,IAAT,CAAcD,OAAO,IACjCA,OAAO,CAACE,IAAR,KAAiBL,QAAjB,IACAG,OAAO,CAACG,KAAR,CAAcR,QAAd,OAA6BE,QAAQ,CAACF,QAAT,EAFjB,CAAhB;;AAKA,UAAIK,OAAO,IAAIA,OAAO,CAACI,KAAvB,EAA8B;AAC1BJ,QAAAA,OAAO,CAACI,KAAR,CAAcC,KAAd,CAAoBP,KAApB;AACH,OAFD,MAEO;AACH,aAAKT,MAAL,CAAYiB,cAAZ,CAA4B,0BAAyBT,QAAS,6BAA9D;AACH;AACJ,KAjBL;AAmBA,WAAON,QAAP;AACH;;AAhC+B,CAApC","sourcesContent":["const Rx = require('rxjs');\nconst { map } = require('rxjs/operators');\n\nconst defaults = require('../defaults');\n\nmodule.exports = class InputHandler {\n    constructor({ defaultInputTarget, inputStream, logger }) {\n        this.defaultInputTarget = defaultInputTarget || defaults.defaultInputTarget;\n        this.inputStream = inputStream;\n        this.logger = logger;\n    }\n\n    handle(commands) {\n        if (!this.inputStream) {\n            return commands;\n        }\n\n        Rx.fromEvent(this.inputStream, 'data')\n            .pipe(map(data => data.toString()))\n            .subscribe(data => {\n                let [targetId, input] = data.split(':', 2);\n                targetId = input ? targetId : this.defaultInputTarget;\n                input = input || data;\n\n                const command = commands.find(command => (\n                    command.name === targetId ||\n                    command.index.toString() === targetId.toString()\n                ));\n\n                if (command && command.stdin) {\n                    command.stdin.write(input);\n                } else {\n                    this.logger.logGlobalEvent(`Unable to find command ${targetId}, or it has no stdin open\\n`);\n                }\n            });\n\n        return commands;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}