{"ast":null,"code":"'use strict';\n\nvar childProcess = require('child_process');\n\nvar spawn = childProcess.spawn;\nvar exec = childProcess.exec;\n\nmodule.exports = function (pid, signal, callback) {\n  if (typeof signal === 'function' && callback === undefined) {\n    callback = signal;\n    signal = undefined;\n  }\n\n  pid = parseInt(pid);\n\n  if (Number.isNaN(pid)) {\n    if (callback) {\n      return callback(new Error(\"pid must be a number\"));\n    } else {\n      throw new Error(\"pid must be a number\");\n    }\n  }\n\n  var tree = {};\n  var pidsToProcess = {};\n  tree[pid] = [];\n  pidsToProcess[pid] = 1;\n\n  switch (process.platform) {\n    case 'win32':\n      exec('taskkill /pid ' + pid + ' /T /F', callback);\n      break;\n\n    case 'darwin':\n      buildProcessTree(pid, tree, pidsToProcess, function (parentPid) {\n        return spawn('pgrep', ['-P', parentPid]);\n      }, function () {\n        killAll(tree, signal, callback);\n      });\n      break;\n    // case 'sunos':\n    //     buildProcessTreeSunOS(pid, tree, pidsToProcess, function () {\n    //         killAll(tree, signal, callback);\n    //     });\n    //     break;\n\n    default:\n      // Linux\n      buildProcessTree(pid, tree, pidsToProcess, function (parentPid) {\n        return spawn('ps', ['-o', 'pid', '--no-headers', '--ppid', parentPid]);\n      }, function () {\n        killAll(tree, signal, callback);\n      });\n      break;\n  }\n};\n\nfunction killAll(tree, signal, callback) {\n  var killed = {};\n\n  try {\n    Object.keys(tree).forEach(function (pid) {\n      tree[pid].forEach(function (pidpid) {\n        if (!killed[pidpid]) {\n          killPid(pidpid, signal);\n          killed[pidpid] = 1;\n        }\n      });\n\n      if (!killed[pid]) {\n        killPid(pid, signal);\n        killed[pid] = 1;\n      }\n    });\n  } catch (err) {\n    if (callback) {\n      return callback(err);\n    } else {\n      throw err;\n    }\n  }\n\n  if (callback) {\n    return callback();\n  }\n}\n\nfunction killPid(pid, signal) {\n  try {\n    process.kill(parseInt(pid, 10), signal);\n  } catch (err) {\n    if (err.code !== 'ESRCH') throw err;\n  }\n}\n\nfunction buildProcessTree(parentPid, tree, pidsToProcess, spawnChildProcessesList, cb) {\n  var ps = spawnChildProcessesList(parentPid);\n  var allData = '';\n  ps.stdout.on('data', function (data) {\n    var data = data.toString('ascii');\n    allData += data;\n  });\n\n  var onClose = function (code) {\n    delete pidsToProcess[parentPid];\n\n    if (code != 0) {\n      // no more parent processes\n      if (Object.keys(pidsToProcess).length == 0) {\n        cb();\n      }\n\n      return;\n    }\n\n    allData.match(/\\d+/g).forEach(function (pid) {\n      pid = parseInt(pid, 10);\n      tree[parentPid].push(pid);\n      tree[pid] = [];\n      pidsToProcess[pid] = 1;\n      buildProcessTree(pid, tree, pidsToProcess, spawnChildProcessesList, cb);\n    });\n  };\n\n  ps.on('close', onClose);\n}","map":{"version":3,"sources":["/Users/tylerlane/Documents/MondayApps/bookmarks/quickstart-react/node_modules/tree-kill/index.js"],"names":["childProcess","require","spawn","exec","module","exports","pid","signal","callback","undefined","parseInt","Number","isNaN","Error","tree","pidsToProcess","process","platform","buildProcessTree","parentPid","killAll","killed","Object","keys","forEach","pidpid","killPid","err","kill","code","spawnChildProcessesList","cb","ps","allData","stdout","on","data","toString","onClose","length","match","push"],"mappings":"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","sourcesContent":["'use strict';\n\nvar childProcess = require('child_process');\nvar spawn = childProcess.spawn;\nvar exec = childProcess.exec;\n\nmodule.exports = function (pid, signal, callback) {\n    if (typeof signal === 'function' && callback === undefined) {\n        callback = signal;\n        signal = undefined;\n    }\n\n    pid = parseInt(pid);\n    if (Number.isNaN(pid)) {\n        if (callback) {\n            return callback(new Error(\"pid must be a number\"));\n        } else {\n            throw new Error(\"pid must be a number\");\n        }\n    }\n\n    var tree = {};\n    var pidsToProcess = {};\n    tree[pid] = [];\n    pidsToProcess[pid] = 1;\n\n    switch (process.platform) {\n    case 'win32':\n        exec('taskkill /pid ' + pid + ' /T /F', callback);\n        break;\n    case 'darwin':\n        buildProcessTree(pid, tree, pidsToProcess, function (parentPid) {\n          return spawn('pgrep', ['-P', parentPid]);\n        }, function () {\n            killAll(tree, signal, callback);\n        });\n        break;\n    // case 'sunos':\n    //     buildProcessTreeSunOS(pid, tree, pidsToProcess, function () {\n    //         killAll(tree, signal, callback);\n    //     });\n    //     break;\n    default: // Linux\n        buildProcessTree(pid, tree, pidsToProcess, function (parentPid) {\n          return spawn('ps', ['-o', 'pid', '--no-headers', '--ppid', parentPid]);\n        }, function () {\n            killAll(tree, signal, callback);\n        });\n        break;\n    }\n};\n\nfunction killAll (tree, signal, callback) {\n    var killed = {};\n    try {\n        Object.keys(tree).forEach(function (pid) {\n            tree[pid].forEach(function (pidpid) {\n                if (!killed[pidpid]) {\n                    killPid(pidpid, signal);\n                    killed[pidpid] = 1;\n                }\n            });\n            if (!killed[pid]) {\n                killPid(pid, signal);\n                killed[pid] = 1;\n            }\n        });\n    } catch (err) {\n        if (callback) {\n            return callback(err);\n        } else {\n            throw err;\n        }\n    }\n    if (callback) {\n        return callback();\n    }\n}\n\nfunction killPid(pid, signal) {\n    try {\n        process.kill(parseInt(pid, 10), signal);\n    }\n    catch (err) {\n        if (err.code !== 'ESRCH') throw err;\n    }\n}\n\nfunction buildProcessTree (parentPid, tree, pidsToProcess, spawnChildProcessesList, cb) {\n    var ps = spawnChildProcessesList(parentPid);\n    var allData = '';\n    ps.stdout.on('data', function (data) {\n        var data = data.toString('ascii');\n        allData += data;\n    });\n\n    var onClose = function (code) {\n        delete pidsToProcess[parentPid];\n\n        if (code != 0) {\n            // no more parent processes\n            if (Object.keys(pidsToProcess).length == 0) {\n                cb();\n            }\n            return;\n        }\n\n        allData.match(/\\d+/g).forEach(function (pid) {\n          pid = parseInt(pid, 10);\n          tree[parentPid].push(pid);\n          tree[pid] = [];\n          pidsToProcess[pid] = 1;\n          buildProcessTree(pid, tree, pidsToProcess, spawnChildProcessesList, cb);\n        });\n    };\n\n    ps.on('close', onClose);\n}\n"]},"metadata":{},"sourceType":"script"}