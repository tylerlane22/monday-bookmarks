{"ast":null,"code":"const InputHandler = require('./src/flow-control/input-handler');\n\nconst KillOnSignal = require('./src/flow-control/kill-on-signal');\n\nconst KillOthers = require('./src/flow-control/kill-others');\n\nconst LogError = require('./src/flow-control/log-error');\n\nconst LogExit = require('./src/flow-control/log-exit');\n\nconst LogOutput = require('./src/flow-control/log-output');\n\nconst RestartProcess = require('./src/flow-control/restart-process');\n\nconst concurrently = require('./src/concurrently');\n\nconst Logger = require('./src/logger');\n\nmodule.exports = (commands, options = {}) => {\n  const logger = new Logger({\n    outputStream: options.outputStream || process.stdout,\n    prefixFormat: options.prefix,\n    prefixLength: options.prefixLength,\n    raw: options.raw,\n    timestampFormat: options.timestampFormat\n  });\n  return concurrently(commands, {\n    maxProcesses: options.maxProcesses,\n    raw: options.raw,\n    successCondition: options.successCondition,\n    controllers: [new LogError({\n      logger\n    }), new LogOutput({\n      logger\n    }), new LogExit({\n      logger\n    }), new InputHandler({\n      logger,\n      defaultInputTarget: options.defaultInputTarget,\n      inputStream: options.inputStream\n    }), new KillOnSignal({\n      process\n    }), new RestartProcess({\n      logger,\n      delay: options.restartDelay,\n      tries: options.restartTries\n    }), new KillOthers({\n      logger,\n      conditions: options.killOthers\n    })]\n  });\n}; // Export all flow controllers and the main concurrently function,\n// so that 3rd-parties can use them however they want\n\n\nexports.concurrently = concurrently;\nexports.Logger = Logger;\nexports.InputHandler = InputHandler;\nexports.KillOnSignal = KillOnSignal;\nexports.KillOthers = KillOthers;\nexports.LogError = LogError;\nexports.LogExit = LogExit;\nexports.LogOutput = LogOutput;\nexports.RestartProcess = RestartProcess;","map":{"version":3,"sources":["/Users/tylerlane/Documents/MondayApps/bookmarks/quickstart-react/node_modules/concurrently/index.js"],"names":["InputHandler","require","KillOnSignal","KillOthers","LogError","LogExit","LogOutput","RestartProcess","concurrently","Logger","module","exports","commands","options","logger","outputStream","process","stdout","prefixFormat","prefix","prefixLength","raw","timestampFormat","maxProcesses","successCondition","controllers","defaultInputTarget","inputStream","delay","restartDelay","tries","restartTries","conditions","killOthers"],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAAC,kCAAD,CAA5B;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,mCAAD,CAA5B;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,gCAAD,CAA1B;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,8BAAD,CAAxB;;AACA,MAAMI,OAAO,GAAGJ,OAAO,CAAC,6BAAD,CAAvB;;AACA,MAAMK,SAAS,GAAGL,OAAO,CAAC,+BAAD,CAAzB;;AACA,MAAMM,cAAc,GAAGN,OAAO,CAAC,oCAAD,CAA9B;;AAEA,MAAMO,YAAY,GAAGP,OAAO,CAAC,oBAAD,CAA5B;;AACA,MAAMQ,MAAM,GAAGR,OAAO,CAAC,cAAD,CAAtB;;AAEAS,MAAM,CAACC,OAAP,GAAiB,CAACC,QAAD,EAAWC,OAAO,GAAG,EAArB,KAA4B;AACzC,QAAMC,MAAM,GAAG,IAAIL,MAAJ,CAAW;AACtBM,IAAAA,YAAY,EAAEF,OAAO,CAACE,YAAR,IAAwBC,OAAO,CAACC,MADxB;AAEtBC,IAAAA,YAAY,EAAEL,OAAO,CAACM,MAFA;AAGtBC,IAAAA,YAAY,EAAEP,OAAO,CAACO,YAHA;AAItBC,IAAAA,GAAG,EAAER,OAAO,CAACQ,GAJS;AAKtBC,IAAAA,eAAe,EAAET,OAAO,CAACS;AALH,GAAX,CAAf;AAQA,SAAOd,YAAY,CAACI,QAAD,EAAW;AAC1BW,IAAAA,YAAY,EAAEV,OAAO,CAACU,YADI;AAE1BF,IAAAA,GAAG,EAAER,OAAO,CAACQ,GAFa;AAG1BG,IAAAA,gBAAgB,EAAEX,OAAO,CAACW,gBAHA;AAI1BC,IAAAA,WAAW,EAAE,CACT,IAAIrB,QAAJ,CAAa;AAAEU,MAAAA;AAAF,KAAb,CADS,EAET,IAAIR,SAAJ,CAAc;AAAEQ,MAAAA;AAAF,KAAd,CAFS,EAGT,IAAIT,OAAJ,CAAY;AAAES,MAAAA;AAAF,KAAZ,CAHS,EAIT,IAAId,YAAJ,CAAiB;AACbc,MAAAA,MADa;AAEbY,MAAAA,kBAAkB,EAAEb,OAAO,CAACa,kBAFf;AAGbC,MAAAA,WAAW,EAAEd,OAAO,CAACc;AAHR,KAAjB,CAJS,EAST,IAAIzB,YAAJ,CAAiB;AAAEc,MAAAA;AAAF,KAAjB,CATS,EAUT,IAAIT,cAAJ,CAAmB;AACfO,MAAAA,MADe;AAEfc,MAAAA,KAAK,EAAEf,OAAO,CAACgB,YAFA;AAGfC,MAAAA,KAAK,EAAEjB,OAAO,CAACkB;AAHA,KAAnB,CAVS,EAeT,IAAI5B,UAAJ,CAAe;AACXW,MAAAA,MADW;AAEXkB,MAAAA,UAAU,EAAEnB,OAAO,CAACoB;AAFT,KAAf,CAfS;AAJa,GAAX,CAAnB;AAyBH,CAlCD,C,CAoCA;AACA;;;AACAtB,OAAO,CAACH,YAAR,GAAuBA,YAAvB;AACAG,OAAO,CAACF,MAAR,GAAiBA,MAAjB;AACAE,OAAO,CAACX,YAAR,GAAuBA,YAAvB;AACAW,OAAO,CAACT,YAAR,GAAuBA,YAAvB;AACAS,OAAO,CAACR,UAAR,GAAqBA,UAArB;AACAQ,OAAO,CAACP,QAAR,GAAmBA,QAAnB;AACAO,OAAO,CAACN,OAAR,GAAkBA,OAAlB;AACAM,OAAO,CAACL,SAAR,GAAoBA,SAApB;AACAK,OAAO,CAACJ,cAAR,GAAyBA,cAAzB","sourcesContent":["const InputHandler = require('./src/flow-control/input-handler');\nconst KillOnSignal = require('./src/flow-control/kill-on-signal');\nconst KillOthers = require('./src/flow-control/kill-others');\nconst LogError = require('./src/flow-control/log-error');\nconst LogExit = require('./src/flow-control/log-exit');\nconst LogOutput = require('./src/flow-control/log-output');\nconst RestartProcess = require('./src/flow-control/restart-process');\n\nconst concurrently = require('./src/concurrently');\nconst Logger = require('./src/logger');\n\nmodule.exports = (commands, options = {}) => {\n    const logger = new Logger({\n        outputStream: options.outputStream || process.stdout,\n        prefixFormat: options.prefix,\n        prefixLength: options.prefixLength,\n        raw: options.raw,\n        timestampFormat: options.timestampFormat,\n    });\n\n    return concurrently(commands, {\n        maxProcesses: options.maxProcesses,\n        raw: options.raw,\n        successCondition: options.successCondition,\n        controllers: [\n            new LogError({ logger }),\n            new LogOutput({ logger }),\n            new LogExit({ logger }),\n            new InputHandler({\n                logger,\n                defaultInputTarget: options.defaultInputTarget,\n                inputStream: options.inputStream,\n            }),\n            new KillOnSignal({ process }),\n            new RestartProcess({\n                logger,\n                delay: options.restartDelay,\n                tries: options.restartTries,\n            }),\n            new KillOthers({\n                logger,\n                conditions: options.killOthers\n            })\n        ]\n    });\n};\n\n// Export all flow controllers and the main concurrently function,\n// so that 3rd-parties can use them however they want\nexports.concurrently = concurrently;\nexports.Logger = Logger;\nexports.InputHandler = InputHandler;\nexports.KillOnSignal = KillOnSignal;\nexports.KillOthers = KillOthers;\nexports.LogError = LogError;\nexports.LogExit = LogExit;\nexports.LogOutput = LogOutput;\nexports.RestartProcess = RestartProcess;\n"]},"metadata":{},"sourceType":"script"}