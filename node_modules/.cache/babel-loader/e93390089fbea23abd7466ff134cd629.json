{"ast":null,"code":"const _ = require('lodash');\n\nconst {\n  filter,\n  map\n} = require('rxjs/operators');\n\nmodule.exports = class KillOthers {\n  constructor({\n    logger,\n    conditions\n  }) {\n    this.logger = logger;\n    this.conditions = _.castArray(conditions);\n  }\n\n  handle(commands) {\n    const conditions = this.conditions.filter(condition => condition === 'failure' || condition === 'success');\n\n    if (!conditions.length) {\n      return commands;\n    }\n\n    const closeStates = commands.map(command => command.close.pipe(map(exitCode => exitCode === 0 ? 'success' : 'failure'), filter(state => conditions.includes(state))));\n    closeStates.forEach(closeState => closeState.subscribe(() => {\n      const killableCommands = commands.filter(command => command.killable);\n\n      if (killableCommands.length) {\n        this.logger.logGlobalEvent('Sending SIGTERM to other processes..');\n        killableCommands.forEach(command => command.kill());\n      }\n    }));\n    return commands;\n  }\n\n};","map":{"version":3,"sources":["/Users/tylerlane/Documents/MondayApps/bookmarks/quickstart-react/node_modules/concurrently/src/flow-control/kill-others.js"],"names":["_","require","filter","map","module","exports","KillOthers","constructor","logger","conditions","castArray","handle","commands","condition","length","closeStates","command","close","pipe","exitCode","state","includes","forEach","closeState","subscribe","killableCommands","killable","logGlobalEvent","kill"],"mappings":"AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAM;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,IAAkBF,OAAO,CAAC,gBAAD,CAA/B;;AAEAG,MAAM,CAACC,OAAP,GAAiB,MAAMC,UAAN,CAAiB;AAC9BC,EAAAA,WAAW,CAAC;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAD,EAAyB;AAChC,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,UAAL,GAAkBT,CAAC,CAACU,SAAF,CAAYD,UAAZ,CAAlB;AACH;;AAEDE,EAAAA,MAAM,CAACC,QAAD,EAAW;AACb,UAAMH,UAAU,GAAG,KAAKA,UAAL,CAAgBP,MAAhB,CAAuBW,SAAS,IAC/CA,SAAS,KAAK,SAAd,IACAA,SAAS,KAAK,SAFC,CAAnB;;AAKA,QAAI,CAACJ,UAAU,CAACK,MAAhB,EAAwB;AACpB,aAAOF,QAAP;AACH;;AAED,UAAMG,WAAW,GAAGH,QAAQ,CAACT,GAAT,CAAaa,OAAO,IAAIA,OAAO,CAACC,KAAR,CAAcC,IAAd,CACxCf,GAAG,CAACgB,QAAQ,IAAIA,QAAQ,KAAK,CAAb,GAAiB,SAAjB,GAA6B,SAA1C,CADqC,EAExCjB,MAAM,CAACkB,KAAK,IAAIX,UAAU,CAACY,QAAX,CAAoBD,KAApB,CAAV,CAFkC,CAAxB,CAApB;AAKAL,IAAAA,WAAW,CAACO,OAAZ,CAAoBC,UAAU,IAAIA,UAAU,CAACC,SAAX,CAAqB,MAAM;AACzD,YAAMC,gBAAgB,GAAGb,QAAQ,CAACV,MAAT,CAAgBc,OAAO,IAAIA,OAAO,CAACU,QAAnC,CAAzB;;AACA,UAAID,gBAAgB,CAACX,MAArB,EAA6B;AACzB,aAAKN,MAAL,CAAYmB,cAAZ,CAA2B,sCAA3B;AACAF,QAAAA,gBAAgB,CAACH,OAAjB,CAAyBN,OAAO,IAAIA,OAAO,CAACY,IAAR,EAApC;AACH;AACJ,KANiC,CAAlC;AAQA,WAAOhB,QAAP;AACH;;AA9B6B,CAAlC","sourcesContent":["const _ = require('lodash');\nconst { filter, map } = require('rxjs/operators');\n\nmodule.exports = class KillOthers {\n    constructor({ logger, conditions }) {\n        this.logger = logger;\n        this.conditions = _.castArray(conditions);\n    }\n\n    handle(commands) {\n        const conditions = this.conditions.filter(condition => (\n            condition === 'failure' ||\n            condition === 'success'\n        ));\n\n        if (!conditions.length) {\n            return commands;\n        }\n\n        const closeStates = commands.map(command => command.close.pipe(\n            map(exitCode => exitCode === 0 ? 'success' : 'failure'),\n            filter(state => conditions.includes(state))\n        ));\n\n        closeStates.forEach(closeState => closeState.subscribe(() => {\n            const killableCommands = commands.filter(command => command.killable);\n            if (killableCommands.length) {\n                this.logger.logGlobalEvent('Sending SIGTERM to other processes..');\n                killableCommands.forEach(command => command.kill());\n            }\n        }));\n\n        return commands;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}